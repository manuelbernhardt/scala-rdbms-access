/*
 * This file is generated by jOOQ.
 */
package jooq.generated.tables


import java.lang.Class
import java.lang.Integer
import java.lang.String
import java.math.BigDecimal
import java.util.Arrays
import java.util.List

import javax.annotation.Generated

import jooq.generated.Indexes
import jooq.generated.Keys
import jooq.generated.Public
import jooq.generated.tables.records.ReceivableRecord

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Index
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.TableImpl

import scala.Array


object Receivable {

  /**
   * The reference instance of <code>PUBLIC.RECEIVABLE</code>
   */
  val RECEIVABLE = new Receivable
}

/**
 * This class is generated by jOOQ.
 */
@Generated(
  value = Array(
    "http://www.jooq.org",
    "jOOQ version:3.11.5"
  ),
  comments = "This class is generated by jOOQ"
)
class Receivable(
  alias : Name,
  child : Table[_ <: Record],
  path : ForeignKey[_ <: Record, ReceivableRecord],
  aliased : Table[ReceivableRecord],
  parameters : Array[ Field[_] ]
)
extends TableImpl[ReceivableRecord](
  alias,
  Public.PUBLIC,
  child,
  path,
  aliased,
  parameters,
  DSL.comment("")
)
{

  /**
   * The class holding records for this type
   */
  override def getRecordType : Class[ReceivableRecord] = {
    classOf[ReceivableRecord]
  }

  /**
   * The column <code>PUBLIC.RECEIVABLE.ID</code>.
   */
  val ID : TableField[ReceivableRecord, Integer] = createField("ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), "")

  /**
   * The column <code>PUBLIC.RECEIVABLE.VERSION</code>.
   */
  val VERSION : TableField[ReceivableRecord, Integer] = createField("VERSION", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), "")

  /**
   * The column <code>PUBLIC.RECEIVABLE.ORDER_ID</code>.
   */
  val ORDER_ID : TableField[ReceivableRecord, String] = createField("ORDER_ID", org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), "")

  /**
   * The column <code>PUBLIC.RECEIVABLE.PRICE</code>.
   */
  val PRICE : TableField[ReceivableRecord, BigDecimal] = createField("PRICE", org.jooq.impl.SQLDataType.DECIMAL.nullable(false), "")

  /**
   * The column <code>PUBLIC.RECEIVABLE.CUSTOMER_ID</code>.
   */
  val CUSTOMER_ID : TableField[ReceivableRecord, String] = createField("CUSTOMER_ID", org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), "")

  /**
   * The column <code>PUBLIC.RECEIVABLE.CURRENCY</code>.
   */
  val CURRENCY : TableField[ReceivableRecord, String] = createField("CURRENCY", org.jooq.impl.SQLDataType.VARCHAR(3), "")

  /**
   * Create a <code>PUBLIC.RECEIVABLE</code> table reference
   */
  def this() = {
    this(DSL.name("RECEIVABLE"), null, null, null, null)
  }

  /**
   * Create an aliased <code>PUBLIC.RECEIVABLE</code> table reference
   */
  def this(alias : String) = {
    this(DSL.name(alias), null, null, jooq.generated.tables.Receivable.RECEIVABLE, null)
  }

  /**
   * Create an aliased <code>PUBLIC.RECEIVABLE</code> table reference
   */
  def this(alias : Name) = {
    this(alias, null, null, jooq.generated.tables.Receivable.RECEIVABLE, null)
  }

  private def this(alias : Name, aliased : Table[ReceivableRecord]) = {
    this(alias, null, null, aliased, null)
  }

  def this(child : Table[_ <: Record], key : ForeignKey[_ <: Record, ReceivableRecord]) = {
    this(Internal.createPathAlias(child, key), child, key, jooq.generated.tables.Receivable.RECEIVABLE, null)
  }

  override def getSchema : Schema = Public.PUBLIC

  override def getIndexes : List[ Index ] = {
    return Arrays.asList[ Index ](Indexes.PRIMARY_KEY_2)
  }

  override def getIdentity : Identity[ReceivableRecord, Integer] = {
    Keys.IDENTITY_RECEIVABLE
  }

  override def getPrimaryKey : UniqueKey[ReceivableRecord] = {
    Keys.CONSTRAINT_2
  }

  override def getKeys : List[ UniqueKey[ReceivableRecord] ] = {
    return Arrays.asList[ UniqueKey[ReceivableRecord] ](Keys.CONSTRAINT_2)
  }

  override def as(alias : String) : Receivable = {
    new Receivable(DSL.name(alias), this)
  }

  override def as(alias : Name) : Receivable = {
    new Receivable(alias, this)
  }

  /**
   * Rename this table
   */
  override def rename(name : String) : Receivable = {
    new Receivable(DSL.name(name), null)
  }

  /**
   * Rename this table
   */
  override def rename(name : Name) : Receivable = {
    new Receivable(name, null)
  }
}
